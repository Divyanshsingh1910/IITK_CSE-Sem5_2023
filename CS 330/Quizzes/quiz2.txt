 1 #include<stdio.h>
  2 #include<stdlib.h>
  3 #include<unistd.h>
  4 int main(void){
  5    void *ptr = NULL, *p_start = sbrk(0);
  6    int a = 100;
  7    pid_t pid = fork(); //Assume success
  8    if(!pid){ //child
  9        ptr = sbrk(4096);
 10        printf("%p\n", &a);
 11    }else{
 12        if(ptr){
 13             printf("yes\n");
 14        }
 15        ptr = sbrk(8192);
 16        printf("%p\n", &a);
 17    }
 18    printf("%ld\n", ptr - p_start);
 19 }
 20 /*  (1 + 1 + 3 + 5 = 10) 
 Q1. Will the values printed in line #10 and line #16 be same? (Yes/No)
 Q2. The `printf' at line#13 will never be executed? (True/False) 
 Q3. What will be the value(s) printed in line#18? (Assume no sbrk calls from C library after start of main()) 
 Q4. Assume that, the child's program counter is modified to jump to the instruction at line #12 after successful execution of sbrk() at line #9. What will be the program behavior and why? (provide brief reasoning) 
*/

Q1. Yes

Q2. True

Q3.  Both parent and child will print 0

Q4. 

- The child process will print "yes" as the ptr is not NULL in the child process (because of the successful brk call in line #9).  

- The child process will further expand the BSS by 8192 bytes (at line # 15) and ptr will be p_start + 4096.  As a result, the child will print 4096 at line #18

