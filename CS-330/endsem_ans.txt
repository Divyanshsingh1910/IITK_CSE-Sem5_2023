Q1.
(a) B, C, D, E
(b) A, B, D, E
(c) A, C, E
(d) A, C, E
(e) A, B, C, E

Q3.

(a)   Total instructions executed = 5
         Total data access = 1 (for ret, access the stack)
        Memory access for translation = 6 * 5 = 30
(Grading scheme: Give half credit if the data access is missed, i.e., answer = 25)

(b) Total instructions executed = 30
        Total Data Access = 1 
        Memory access for translation = 31 * 5 = 155
(Grading scheme: Give half credit if the data access is missed, i.e., answer = 150)

(c) Translations = 1 (R3 = 0) + 5 * # of loop iterations + 2 (loop break) + 2 (return) 
                       + 1 (ret stack access)
                     = 5 * a + 6
    Memory accesses = 25 * a + 30
(Grading scheme: Give half credit if the data access is missed, i.e., answer = 5*(a+1))

(d)     #of translations using page table = 2
        Memory Acceses = 10 
(Grading scheme: Give half credit if the data access is missed, i.e., answer = 5)

(e) 10
(Grading scheme: Give half credit if the data access is missed, i.e., answer = 5)

Q4.  No, it will not meet mutual exclusion as shown in the following execution order.
   T0 invokes unlock while T1 is waiting at the while loop.
   T0 sets turn = 1 and gets descheduled
   T1 gets the lock, enters the CS and calls unlock
   T1 sets the turn = 0 and invokes lock, stuck in the while condition
   T0 sets flag[0] = 0 which allows T1 to enter the CS
   While T1 is in CS, T0 calls lock again and enters the CS (as turn = 0)      

Q5. There will be four deadlock scenarios.

(a) 

1) Threads check the 'if' condition one after the other and only one thread enters the 'if' block. 
In this case, two threads will wait at line #9 and one at line #10.

2) Two threads enter the 'if' block and set the S.val = 2. After that, both threads acquire the semaphore 
at line #9 and wait at line #10. The third thread follows these two threads and gets stuck at line #9. 

3) All thread threads enter the 'if' block and set the S.val = 3. After that, all threads acquire the semaphore 
at line#9 but wait for the semaphore at line #10.

4) Two threads enter the 'if' block and set the S.val = 2. After that one thread runs to completion. 
   The remaining two threads acquire the semaphore at line #9 and wait for the semaphore at line #10.

(b) The minimum #of malloc calls would be 2. With one malloc call, the S.val will be 1
which will not allow any thread to progress. However, if  two threads enter the 'if' block and
invoke the malloc call, the S.val will be 2 which may allow execution w/o any deadlock.        

(c) The minimum value of *ptr will be 1. This can happen when all threads enter the
if block, two threads operate on the same address to make the value of *ptr=2. However, the third
thread does the allocation after the two threads exit and initializes it to zero and increments
it to one at line #11

Q6. 

(a) 2 ^ 42 bytes = 4TB 

(b) (8 + 4*256 + 2 * 256 * 256) * (1024/256)    // 256 byte per entry
    (Above answer - 2 will be accepted as special entries like "." and ".." are created by most file systems by default)

(c) Min: 5 + 1 = 6 blocks (At every level of directory the next level is found in the first block. One for reading the file)
   Max: 5 * (8 + 4*256 + 2*256*256) + 1 (At every level, the entry is found in the last block of the directory)
  {Grading scheme: 1 + 2}

(d) Min: 1  (Everything is a cache hit except for the file block)
    Max: 5 * (8 + 4 + 4*256 + 2 + 2*256 + 2*256*256) + 2
Explanation: At every level, the entry is found in the last block of the directory and the file block is the last block of the file. 
No cache hit for indexes and directory content at any level.  For the file data, we need to read one indirect index block and 
one data block.

{Grading scheme: 1 + 2}
